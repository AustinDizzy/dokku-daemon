#!/bin/bash

set -eo pipefail

VERSION="0.0.1"
DOKKU_SOCK_PATH=${DOKKU_SOCK_PATH:="/tmp/dokku-daemon.sock"}
DOKKU_FIFO_PATH=${DOKKU_FIFO_PATH:="/tmp/dokku-daemon.fifo"}
DOKKU_LOGS_DIR=${DOKKU_LOGS_DIR:="/var/log/dokku"}

usage() {
  echo "Usage: dokku-daemon [-h|-v]"
}

version() {
  echo "Version $VERSION"
}

log() {
  timestamp=$(date "+%Y-%m-%d %H:%M:%S %Z")
  echo "[$timestamp] $1" >> "$DOKKU_LOGS_DIR/dokku-daemon.log"
}

json_encode() {
  [[ "$2" -eq 0 ]] && local status="true" || local status="false"

  # Replace newlines with their escaped counterparts
  local output=$(echo -n "$1" | sed ':a;N;$!ba;s/\n/\\n/g')

  printf '{"ok":%s,"output":"%s"}' "$status" "$output"
}

cleanup() {
  rm -f "$DOKKU_SOCK_PATH"
  rm -f "$DOKKU_FIFO_PATH"

  log "Stopping daemon..."

  trap - TERM && kill 0
}

server() {
  trap 'cleanup' TERM ABRT QUIT EXIT KILL

  # list valid commands for dokku
  local commands=$(dokku help | awk '/^    /{ print $1 }')

  # remove previously created devices
  rm -f "$DOKKU_SOCK_PATH"
  rm -f "$DOKKU_FIFO_PATH"

  mkfifo "$DOKKU_FIFO_PATH"

  # start accepting connections
  log "Listening on $DOKKU_SOCK_PATH..."

  nc -lkU "$DOKKU_SOCK_PATH" < "$DOKKU_FIFO_PATH" | while read input; do
    # parse command components into an array
    local cmd=($input)

    case "${cmd[0]}" in
      shell)
        response="Not implemented"
        status=1
        ;;
      commands)
        response="$commands"
        status=0
        ;;
      *)
        if echo "$commands" | grep -q "^${cmd[0]}$"; then
          set +e

          if [[ "${cmd[0]}" = "apps:destroy" ]]; then
            response=$(echo "${cmd[1]}" | dokku "${cmd[@]}" 2>&1)
          else
            response=$(dokku "${cmd[@]}" 2>&1)
            status="$?"
          fi

          set -e
        else
          response="Invalid command"
          status=1
        fi
        ;;
    esac

    formatted=$(json_encode "$response" "$status")

    log "[cmd] $input"
    log "[res] $formatted"

    echo "$formatted"
  done > "$DOKKU_FIFO_PATH" &

  wait
}

main() {
  while [[ "$#" > 0 ]]; do
    case "$1" in
      -h)
        usage
        exit 0
        ;;
      -v)
        version
        exit 0
        ;;
      *)
        echo "Error: Unkown option $1" 1>&2
        exit 1
        ;;
    esac
  done

  server
}

main "$@"
